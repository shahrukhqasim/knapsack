knapsack - A fast solver for the bound and unbound 0/1-knapsack problem with integer weights with relatively low memory requirements

(C) Martin VÃ¤th <martin@mvath.de>
This project is distributed under the terms of the
GNU General Public License v2.

This program was written rather quickly to train myself.

It uses a dynamic programming type approach to the 0/1 knapsack problem
(in the bound or unbound form).

Note that the classical dynamic programming approach based on arrays
requires an enormous amount of memory if the weights are huge.
In contrast, this program uses only actually needed memory.

Therefore, this program is appropriate to e.g. calculate an "optimal"
filling for a CD or DVD from a given collection of relatively large files.

The program consists of libraries which can be used independently:

knapsack.h:        The main class consisting of generic templates libraries.
                   The output functions have to be overloaded.
knapsack_output.h: Some template instances of the Knapsack classes with output
                   overloaded using typesafe https://github.com/vaeth/osformat

The libraries are consumed by
knapsack.cc:       A simple CLI to knapsack_output.h with the largest possible
                   precision which is still natively supported by the compiler

Requirements:
To use the knapsack_output.h file or to compile/use the CLI, you need to have
https://github.com/vaeth/osformat
installed.

Installation:
If the requirement is fulfilled, compilation of the CLI should be simple:
Just run "make" (as user) and "make install" (as root)
Look at the Makefile if you need to adapt paths.

To use the libraries, just include them (with the appropriate path);
when using knapsack_output.h, you will also have to include appropriate
compiler and linker flags for the osformat library.
Usually, you should get these with
 pkg-config --libs osformat
 pkg-config --cflags osformat

To use the zsh completion file, make sure that it is in you zsh's $fpath.

To get help for the CLI, type
knapsack -h
